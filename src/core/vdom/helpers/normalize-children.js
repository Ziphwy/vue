/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
/**
 * 翻译：
 *  模板编译器会在编译时对模板进行静态分析，试图使标准化的需要变得最小
 *
 *  对于纯粹的 HTML 标记，标准化可以完全跳过，因为生成 render 函数保证返回 Array<VNode>
 *  有两种情况需要额外的标准化：
 *
 * 笔记：
 *  q: 什么是标准化，对谁进行标准化？
 */

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
/**
 * 翻译：
 *  当子元素包含组件(因为一个函数式组件可能返回一个数组而不是一个单个节点)
 *  在这种情况下，仅需要简单标准化
 *  即如果一些子元素是数组，我们使用 Array.prototype.concat 使所有的东西扁平化。
 *  这保证了只有一层的深度，因为函数式组件已经标准化他们自己的子元素了
 *
 * 笔记：
 *  函数式组件允许返回
 */
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
/**
 * 翻译：
 *  当子元素包含总是生成嵌套数组的结构
 *  例如 <template>, <slot>, v-for, 或者当子元素是用户手写的 render 函数 / JSX 所提供的
 *  在这种情况下，需要进行完整的标准化去适配所有子元素可能出现的类型
 *
 * 笔记：
 *  - 子元素集合 是基本类型，返回一个 [TextNode]
 *  - 子元素集合 是数组，进行子元素数组标准化
 *  - 其他，返回 undefined
 *
 *  q: 测试没能发现 v-for 会生成嵌套数组节点?
 *  a: 实际上，如果一个节点内部只有 v-for 的节点，形如
 *     <ul>
 *        <li v-for=""></li>
 *      </ul>
 *     这时候不需要标准化子元素，上次测试就是这种情况
 *     生成 render 函数时候，由于只有一个节点，[v-for] 数组直接充当 children 参数；
 *     而形如
 *     <ul>
 *      <div>more</div>
 *      <li v-for=""></li>
 *     </ul>
 *     这时候，由于存在两个节点，children 参数变成 [h(), [v-for]]，模板编译时会加入标准化子元素的参数 2;
 *     这纯粹是由于模板编译的对保留原始结构需要？
 */
export function normalizeChildren (children: any): ?Array<VNode> {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

// 笔记：节点存在，节点的 text 存在，节点不是注释节点
function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  const res = []
  let i, c, lastIndex, last
  for (i = 0; i < children.length; i++) {
    c = children[i]
    // 笔记：如果是 undefined 或者 boolean 则抛弃
    if (isUndef(c) || typeof c === 'boolean') continue

    lastIndex = res.length - 1
    last = res[lastIndex]

    if (Array.isArray(c) && c.length > 0) {
      // 笔记：递归处理嵌套数组，并生成 nestedIndex
      c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
      // 笔记：
      //  非嵌套数组标准化会合并相邻文本节点，因此，只会存在递归结果中第一个节点与已处理的上一个节点未合并
      //  第一个节点如果是文本节点，上一个节点是文本节点的话，将当前文本内容并入上一个文本节点
      if (isTextNode(c[0]) && isTextNode(last)) {
        res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
        c.shift()
      }
      res.push.apply(res, c)
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        // 翻译：合并相邻的文本节点，这对服务端渲染混合真实 DOM 是必要的，因为渲染 HTML 字符串时，文本节点本质上是合并的
        // 笔记：上一个节点是文本节点的话，将当前文本内容并入上一个文本节点
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // convert primitive to vnode
        // 笔记：转换基本类型为文本节点并添加
        res.push(createTextVNode(c))
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        // 笔记：已经是文本节点，上一个节点是文本节点的话，将当前文本内容并入上一个文本节点
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        // 翻译：给嵌套数组的默认的 key（可能由 v-for 生成的）
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
